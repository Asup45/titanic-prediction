#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal pour d√©marrer tous les composants de l'application Titanic.
Ce script d√©marre la base de donn√©es, l'API et l'application Streamlit.
"""

import os
import sys
import time
import subprocess
import threading
import signal
import psycopg2
from psycopg2 import sql
from scripts.processing.proc import ensure_tables_exist

# Configuration de la base de donn√©es
DB_CONFIG = {
    "host": "localhost",
    "database": "pipeline_db",
    "user": "postgres",
    "password": "Poiuytrezaqsd09!21",
    "port": 5432
}

# Processus et threads
processes = []
stop_event = threading.Event()

def check_postgres():
    """
    V√©rifie si PostgreSQL est accessible.
    
    Returns:
        bool: True si PostgreSQL est accessible, False sinon
    """
    try:
        conn = psycopg2.connect(
            host=DB_CONFIG["host"],
            port=DB_CONFIG["port"],
            user=DB_CONFIG["user"],
            password=DB_CONFIG["password"]
        )
        conn.close()
        return True
    except Exception:
        return False

def create_database():
    """
    Cr√©e la base de donn√©es si elle n'existe pas.
    
    Returns:
        bool: True si la base de donn√©es existe ou a √©t√© cr√©√©e, False sinon
    """
    try:
        # Se connecter √† PostgreSQL
        conn = psycopg2.connect(
            host=DB_CONFIG["host"],
            port=DB_CONFIG["port"],
            user=DB_CONFIG["user"],
            password=DB_CONFIG["password"],
            database="postgres",  # Base de donn√©es par d√©faut
            options="-c client_encoding=UTF8"
        )
        conn.autocommit = True
        cursor = conn.cursor()
        
        # V√©rifier si la base de donn√©es existe
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (DB_CONFIG["database"],))
        if cursor.fetchone():
            print(f"‚úÖ Base de donn√©es '{DB_CONFIG['database']}' existe d√©j√†")
            conn.close()
            return True
        
        # Cr√©er la base de donn√©es
        cursor.execute(sql.SQL("CREATE DATABASE {}").format(
            sql.Identifier(DB_CONFIG["database"])
        ))
        print(f"‚úÖ Base de donn√©es '{DB_CONFIG['database']}' cr√©√©e avec succ√®s")
        conn.close()
        
        # Se connecter √† la nouvelle base de donn√©es et cr√©er les tables
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # Cr√©er la table "predictions"
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS predictions (
            id SERIAL PRIMARY KEY,
            prediction_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            passenger_data JSONB,
            prediction_result JSONB
        )
        """)
        
        conn.close()

        # Appeler ensure_tables_exist pour v√©rifier/cr√©er les tables
        ensure_tables_exist()

        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        return False

def run_data_processing():
    """
    Lance le script de traitement des donn√©es.
    """
    print("üîÑ Ex√©cution du traitement des donn√©es...")
    proc = subprocess.run([
        sys.executable, "scripts/processing/proc.py"
    ])
    if proc.returncode == 0:
        print("‚úÖ Traitement des donn√©es termin√© avec succ√®s")
    else:
        print("‚ùå Erreur lors du traitement des donn√©es")

def run_model_training():
    """
    Lance le script d'entra√Ænement du mod√®le.
    """
    print("üß† Entra√Ænement du mod√®le...")
    proc = subprocess.run([
        sys.executable, "scripts/training/train.py"
    ])
    if proc.returncode == 0:
        print("‚úÖ Entra√Ænement du mod√®le termin√© avec succ√®s")
    else:
        print("‚ùå Erreur lors de l'entra√Ænement du mod√®le")

def run_api():
    """
    Lance l'API FastAPI dans un thread s√©par√©.
    """
    def target():
        print("üöÄ D√©marrage de l'API FastAPI...")
        api_process = subprocess.Popen([
            sys.executable, "run_api.py"
        ])
        processes.append(api_process)
        api_process.wait()
    
    thread = threading.Thread(target=target)
    thread.daemon = True
    thread.start()
    return thread

def run_streamlit():
    """
    Lance l'application Streamlit dans un thread s√©par√©.
    """
    def target():
        print("üöÄ D√©marrage de l'application Streamlit...")
        streamlit_process = subprocess.Popen([
            sys.executable, "run_streamlit.py"
        ])
        processes.append(streamlit_process)
        streamlit_process.wait()
    
    thread = threading.Thread(target=target)
    thread.daemon = True
    thread.start()
    return thread

def signal_handler(sig, frame):
    """
    G√®re l'arr√™t propre des processus lors de l'interruption (Ctrl+C).
    """
    print("\nüõë Arr√™t des services...")
    stop_event.set()
    
    for process in processes:
        if process.poll() is None:  # Si le processus est toujours en cours d'ex√©cution
            try:
                process.terminate()
                time.sleep(0.5)
                if process.poll() is None:
                    process.kill()
            except:
                pass
    
    print("üëã Au revoir!")
    sys.exit(0)

def check_requirements():
    """
    V√©rifie que les d√©pendances requises sont install√©es.
    """
    try:
        import fastapi
        import uvicorn
        import streamlit
        import pandas
        import sklearn
        import joblib
        import matplotlib
        import seaborn
        import requests
        return True
    except ImportError as e:
        print(f"‚ùå Erreur: D√©pendance manquante: {e}")
        print("üí° Veuillez installer les d√©pendances requises avec: pip install -r requirements.txt")
        return False

def main():
    """
    Fonction principale.
    """
    # En-t√™te
    print("=" * 60)
    print("       TITANIC PREDICTION - D√âMARRAGE COMPLET       ")
    print("=" * 60)
    
    # Enregistrer le gestionnaire de signaux pour g√©rer Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # V√©rifier les d√©pendances
    if not check_requirements():
        return
    
    # V√©rifier si PostgreSQL est accessible
    print("üîç V√©rification de PostgreSQL...")
    if not check_postgres():
        print("‚ùå PostgreSQL n'est pas accessible. Veuillez v√©rifier que PostgreSQL est install√© et en cours d'ex√©cution.")
        print("üí° Sur Windows, vous pouvez t√©l√©charger PostgreSQL depuis: https://www.postgresql.org/download/windows/")
        return
    
    # Cr√©er la base de donn√©es et les tables
    if not create_database():
        return
    
    # Ex√©cuter le traitement des donn√©es
    run_data_processing()
    
    # Ex√©cuter l'entra√Ænement du mod√®le
    run_model_training()
    
    # D√©marrer l'API
    api_thread = run_api()
    
    # Attendre que l'API soit pr√™te
    print("‚è≥ Attente du d√©marrage de l'API...")
    time.sleep(5)
    
    # D√©marrer Streamlit
    streamlit_thread = run_streamlit()
    
    # Afficher les URLs d'acc√®s
    print("\n" + "=" * 60)
    print("üåê Application pr√™te! Acc√®s aux services:")
    print(f"üìä Application Streamlit: http://localhost:8501")
    print(f"üîå API FastAPI: http://localhost:8000")
    print(f"üìö Documentation de l'API: http://localhost:8000/docs")
    print("=" * 60)
    print("Appuyez sur Ctrl+C pour arr√™ter tous les services.")
    
    # Maintenir le script en cours d'ex√©cution jusqu'√† interruption
    try:
        while not stop_event.is_set():
            time.sleep(1)
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)

if __name__ == "__main__":
    main() 